// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ATCDisplay.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_al_12_13_mtejedor_Practica3D_ATCSim_src_ICE_cpp_ATCDisplay_h__
#define ___home_al_12_13_mtejedor_Practica3D_ATCSim_src_ICE_cpp_ATCDisplay_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace ATCDisplay
{

class AirportInterface;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::ATCDisplay::AirportInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::ATCDisplay::AirportInterface*);

}

}

namespace ATCDisplay
{

class AirportInterface;
bool operator==(const AirportInterface&, const AirportInterface&);
bool operator<(const AirportInterface&, const AirportInterface&);
::Ice::Object* upCast(::ATCDisplay::AirportInterface*);
typedef ::IceInternal::Handle< ::ATCDisplay::AirportInterface> AirportInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ATCDisplay::AirportInterface> AirportInterfacePrx;
void __patch(AirportInterfacePtr&, const ::Ice::ObjectPtr&);

}

namespace ATCDisplay
{

struct ATCDPosition
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

typedef ::std::vector< ::ATCDisplay::ATCDPosition> ATCDRoute;

struct ATCDFlight
{
    ::Ice::Float points;
    ::Ice::Float speed;
    bool focused;
    ::std::string id;
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float inclination;
    ::Ice::Float bearing;
    ::Ice::Float collisionRadious;
    ::ATCDisplay::ATCDRoute flightRoute;
};

typedef ::std::vector< ::ATCDisplay::ATCDFlight> ATCDFlights;

struct ATCDLandStrip
{
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float width;
    ::Ice::Float length;
    ::Ice::Float orientation;
};

typedef ::std::vector< ::ATCDisplay::ATCDLandStrip> ATCDLandStrips;

struct ATCDAirport
{
    ::ATCDisplay::ATCDLandStrips airportLandstrips;
    ::Ice::Float radious;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::ATCDisplay::ATCDPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::ATCDisplay::ATCDPosition, S>
{
    static void write(S* __os, const ::ATCDisplay::ATCDPosition& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::ATCDisplay::ATCDPosition, S>
{
    static void read(S* __is, ::ATCDisplay::ATCDPosition& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDFlight>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ATCDisplay::ATCDFlight, S>
{
    static void write(S* __os, const ::ATCDisplay::ATCDFlight& v)
    {
        __os->write(v.points);
        __os->write(v.speed);
        __os->write(v.focused);
        __os->write(v.id);
        __os->write(v.pos);
        __os->write(v.inclination);
        __os->write(v.bearing);
        __os->write(v.collisionRadious);
        __os->write(v.flightRoute);
    }
};

template<class S>
struct StreamReader< ::ATCDisplay::ATCDFlight, S>
{
    static void read(S* __is, ::ATCDisplay::ATCDFlight& v)
    {
        __is->read(v.points);
        __is->read(v.speed);
        __is->read(v.focused);
        __is->read(v.id);
        __is->read(v.pos);
        __is->read(v.inclination);
        __is->read(v.bearing);
        __is->read(v.collisionRadious);
        __is->read(v.flightRoute);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDLandStrip>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::ATCDisplay::ATCDLandStrip, S>
{
    static void write(S* __os, const ::ATCDisplay::ATCDLandStrip& v)
    {
        __os->write(v.pos);
        __os->write(v.width);
        __os->write(v.length);
        __os->write(v.orientation);
    }
};

template<class S>
struct StreamReader< ::ATCDisplay::ATCDLandStrip, S>
{
    static void read(S* __is, ::ATCDisplay::ATCDLandStrip& v)
    {
        __is->read(v.pos);
        __is->read(v.width);
        __is->read(v.length);
        __is->read(v.orientation);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDAirport>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ATCDisplay::ATCDAirport, S>
{
    static void write(S* __os, const ::ATCDisplay::ATCDAirport& v)
    {
        __os->write(v.airportLandstrips);
        __os->write(v.radious);
    }
};

template<class S>
struct StreamReader< ::ATCDisplay::ATCDAirport, S>
{
    static void read(S* __is, ::ATCDisplay::ATCDAirport& v)
    {
        __is->read(v.airportLandstrips);
        __is->read(v.radious);
    }
};

}

namespace ATCDisplay
{

class Callback_AirportInterface_getFlights_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getFlights_Base> Callback_AirportInterface_getFlightsPtr;

class Callback_AirportInterface_getAirportInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getAirportInfo_Base> Callback_AirportInterface_getAirportInfoPtr;

class Callback_AirportInterface_UpdateSimT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_UpdateSimT_Base> Callback_AirportInterface_UpdateSimTPtr;

class Callback_AirportInterface_NextFocus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_NextFocus_Base> Callback_AirportInterface_NextFocusPtr;

class Callback_AirportInterface_getSimT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getSimT_Base> Callback_AirportInterface_getSimTPtr;

class Callback_AirportInterface_getMaxFlights_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getMaxFlights_Base> Callback_AirportInterface_getMaxFlightsPtr;

class Callback_AirportInterface_getPoints_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getPoints_Base> Callback_AirportInterface_getPointsPtr;

}

namespace IceProxy
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::ATCDisplay::ATCDFlights getFlights()
    {
        return getFlights(0);
    }
    ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context& __ctx)
    {
        return getFlights(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFlights(const ::IceInternal::Function<void (const ::ATCDisplay::ATCDFlights&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFlights(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFlights(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFlights(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFlights(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::ATCDisplay::ATCDFlights&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFlights(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFlights(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFlights(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFlights(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::ATCDisplay::ATCDFlights&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::ATCDisplay::ATCDFlights&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
                ::ATCDisplay::ATCDFlights __ret;
                try
                {
                    __ret = __proxy->end_getFlights(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::ATCDisplay::ATCDFlights&)> _response;
        };
        return begin_getFlights(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFlights()
    {
        return begin_getFlights(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& __ctx)
    {
        return begin_getFlights(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::ATCDisplay::Callback_AirportInterface_getFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(&__ctx, __del, __cookie);
    }

    ::ATCDisplay::ATCDFlights end_getFlights(const ::Ice::AsyncResultPtr&);
    
private:

    ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::ATCDisplay::ATCDAirport getAirportInfo()
    {
        return getAirportInfo(0);
    }
    ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context& __ctx)
    {
        return getAirportInfo(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAirportInfo(const ::IceInternal::Function<void (const ::ATCDisplay::ATCDAirport&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAirportInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAirportInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAirportInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAirportInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::ATCDisplay::ATCDAirport&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAirportInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAirportInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAirportInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAirportInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::ATCDisplay::ATCDAirport&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::ATCDisplay::ATCDAirport&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
                ::ATCDisplay::ATCDAirport __ret;
                try
                {
                    __ret = __proxy->end_getAirportInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::ATCDisplay::ATCDAirport&)> _response;
        };
        return begin_getAirportInfo(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAirportInfo()
    {
        return begin_getAirportInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& __ctx)
    {
        return begin_getAirportInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::ATCDisplay::Callback_AirportInterface_getAirportInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getAirportInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(&__ctx, __del, __cookie);
    }

    ::ATCDisplay::ATCDAirport end_getAirportInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UpdateSimT(::Ice::Float inc)
    {
        UpdateSimT(inc, 0);
    }
    void UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx)
    {
        UpdateSimT(inc, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UpdateSimT(::Ice::Float inc, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateSimT(inc, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_UpdateSimT(::Ice::Float inc, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateSimT(inc, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateSimT(inc, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateSimT(inc, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc)
    {
        return begin_UpdateSimT(inc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx)
    {
        return begin_UpdateSimT(inc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::ATCDisplay::Callback_AirportInterface_UpdateSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_UpdateSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, &__ctx, __del, __cookie);
    }

    void end_UpdateSimT(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateSimT(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void NextFocus()
    {
        NextFocus(0);
    }
    void NextFocus(const ::Ice::Context& __ctx)
    {
        NextFocus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_NextFocus(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_NextFocus(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_NextFocus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_NextFocus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_NextFocus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_NextFocus(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_NextFocus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_NextFocus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_NextFocus()
    {
        return begin_NextFocus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& __ctx)
    {
        return begin_NextFocus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::ATCDisplay::Callback_AirportInterface_NextFocusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_NextFocusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(&__ctx, __del, __cookie);
    }

    void end_NextFocus(const ::Ice::AsyncResultPtr&);
    
private:

    void NextFocus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float getSimT()
    {
        return getSimT(0);
    }
    ::Ice::Float getSimT(const ::Ice::Context& __ctx)
    {
        return getSimT(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSimT(const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSimT(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSimT(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSimT(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSimT(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSimT(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSimT(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSimT(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSimT(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_getSimT(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_getSimT(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSimT()
    {
        return begin_getSimT(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& __ctx)
    {
        return begin_getSimT(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::ATCDisplay::Callback_AirportInterface_getSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(&__ctx, __del, __cookie);
    }

    ::Ice::Float end_getSimT(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float getSimT(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getMaxFlights()
    {
        return getMaxFlights(0);
    }
    ::Ice::Int getMaxFlights(const ::Ice::Context& __ctx)
    {
        return getMaxFlights(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMaxFlights(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMaxFlights(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMaxFlights(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMaxFlights(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMaxFlights(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMaxFlights(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMaxFlights(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMaxFlights(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMaxFlights(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getMaxFlights(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getMaxFlights(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMaxFlights()
    {
        return begin_getMaxFlights(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& __ctx)
    {
        return begin_getMaxFlights(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::ATCDisplay::Callback_AirportInterface_getMaxFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getMaxFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getMaxFlights(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getMaxFlights(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getPoints()
    {
        return getPoints(0);
    }
    ::Ice::Int getPoints(const ::Ice::Context& __ctx)
    {
        return getPoints(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPoints(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPoints(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPoints(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPoints(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPoints(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPoints(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPoints(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPoints(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPoints(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getPoints(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getPoints(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPoints()
    {
        return begin_getPoints(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& __ctx)
    {
        return begin_getPoints(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::ATCDisplay::Callback_AirportInterface_getPointsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getPointsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getPoints(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getPoints(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_secure(bool __secure) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_twoway() const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_oneway() const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_batchOneway() const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_datagram() const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_batchDatagram() const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_compress(bool __compress) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void NextFocus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float getSimT(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getMaxFlights(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getPoints(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceDelegate::ATCDisplay::AirportInterface,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void NextFocus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getSimT(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getPoints(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceDelegate::ATCDisplay::AirportInterface,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void NextFocus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getSimT(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getPoints(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace ATCDisplay
{

class AirportInterface : virtual public ::Ice::Object
{
public:

    typedef AirportInterfacePrx ProxyType;
    typedef AirportInterfacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAirportInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void NextFocus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___NextFocus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getSimT(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMaxFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getPoints(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPoints(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AirportInterface& l, const AirportInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AirportInterface& l, const AirportInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace ATCDisplay
{

template<class T>
class CallbackNC_AirportInterface_getFlights : public Callback_AirportInterface_getFlights_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDFlights&);

    CallbackNC_AirportInterface_getFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDFlights __ret;
        try
        {
            __ret = __proxy->end_getFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getFlights<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getFlights<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getFlights : public Callback_AirportInterface_getFlights_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDFlights&, const CT&);

    Callback_AirportInterface_getFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDFlights __ret;
        try
        {
            __ret = __proxy->end_getFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getAirportInfo : public Callback_AirportInterface_getAirportInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDAirport&);

    CallbackNC_AirportInterface_getAirportInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDAirport __ret;
        try
        {
            __ret = __proxy->end_getAirportInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getAirportInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getAirportInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getAirportInfo : public Callback_AirportInterface_getAirportInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDAirport&, const CT&);

    Callback_AirportInterface_getAirportInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDAirport __ret;
        try
        {
            __ret = __proxy->end_getAirportInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getAirportInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getAirportInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_UpdateSimT : public Callback_AirportInterface_UpdateSimT_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AirportInterface_UpdateSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_UpdateSimT : public Callback_AirportInterface_UpdateSimT_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AirportInterface_UpdateSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_NextFocus : public Callback_AirportInterface_NextFocus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AirportInterface_NextFocus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_NextFocus : public Callback_AirportInterface_NextFocus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AirportInterface_NextFocus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getSimT : public Callback_AirportInterface_getSimT_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_AirportInterface_getSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSimT(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getSimT<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getSimT : public Callback_AirportInterface_getSimT_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_AirportInterface_getSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSimT(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getMaxFlights : public Callback_AirportInterface_getMaxFlights_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AirportInterface_getMaxFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getMaxFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getMaxFlights<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getMaxFlights<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getMaxFlights : public Callback_AirportInterface_getMaxFlights_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AirportInterface_getMaxFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getMaxFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getMaxFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getMaxFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getPoints : public Callback_AirportInterface_getPoints_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AirportInterface_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPoints(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getPoints<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getPoints<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getPoints : public Callback_AirportInterface_getPoints_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AirportInterface_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPoints(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getPoints<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getPoints<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
